= = = = = = = = = = = = = JOINS = = = = = = = = = = = = = 

-- Get all invoices where the UnitPrice on the InvoiceLine is greater than $0.99.
SELECT * FROM invoice
	JOIN invoiceline ON invoice.invoiceid = invoiceline.invoiceid
    WHERE invoiceline.unitprice > 0.99;

-- Get the InvoiceDate, customer FirstName and LastName, and Total from all invoices.
SELECT i.invoicedate, i.total, c.firstname, c.lastname
	FROM invoice i
    JOIN customer c ON i.customerid = c.customerid;

-- Get the customer FirstName and LastName and the support rep's FirstName and LastName from all customers.
SELECT c.firstname, c.lastname, e.firstname, e.lastname
	FROM customer c
    JOIN employee e ON c.supportrepid = e.employeeid;

-- Get the album Title and the artist Name from all albums.
SELECT al.title, ar.name
	FROM album al
    JOIN artist ar ON al.artistid = ar.artistid;

-- Get all PlaylistTrack TrackIds where the playlist Name is Music.
SELECT pt.trackid
	FROM playlistTrack pt
    JOIN playlist p ON pt.playlistid = p.playlistid
    WHERE p.name = 'Music';

-- Get all Track Names for PlaylistId 5.
SELECT t.name
	FROM track t
    JOIN playlisttrack pt ON t.trackid = pt.trackid
    WHERE pt.playlistid = 5;

-- Get all Track Names and the playlist Name that they're on ( 2 joins ).
SELECT t.name, p.name
	FROM track t
    JOIN playlisttrack pt ON t.trackid = pt.trackid
    JOIN playlist p ON p.playlistid = pt.playlistid;

-- Get all Track Names and Album Titles that are the genre "Alternative" ( 2 joins ).
SELECT t.name, a.title
	FROM track t
    JOIN album a ON t.albumid = a.albumid
    JOIN genre g ON t.genreid = g.genreid
    WHERE g.name = 'Alternative';

-- Get all tracks on the playlist(s) called Music and show their name, genre name, 
-- album name, and artist name.
SELECT t.name, g.name, al.title, ar.name
	FROM track t
    JOIN genre g ON t.genreid = g.genreid
    JOIN album al ON al.albumid = t.albumid
    JOIN artist ar ON ar.artistid = al.artistid
    JOIN playlisttrack pt ON pt.playlistid = t.trackid
    JOIN playlist p ON p.playlistid = pt.playlistid
    WHERE p.name = 'Music';

= = = = = = = = = = = = = NESTED QUERIES = = = = = = = = = = = = = 

-- Get all invoices where the UnitPrice on the InvoiceLine is greater than $0.99.
 SELECT * FROM invoice 
 	WHERE invoiceid 
    IN ( 
      SELECT invoiceid 
      FROM invoiceline 
      WHERE unitprice > 0.99
    );

-- Get all Playlist Tracks where the playlist name is Music.
SELECT * FROM playlisttrack
	WHERE playlistid 
    IN ( 
      SELECT playlistid FROM playlist WHERE name = 'Music'
    );

-- Get all Track names for PlaylistId 5.
SELECT name FROM track
	WHERE trackid
    IN (
      SELECT trackid FROM playlisttrack WHERE playlistid = 5
    );

-- Get all tracks where the Genre is Comedy.
SELECT * FROM track
	WHERE genreid
    IN (
      SELECT genreid FROM genre WHERE name = 'Comedy'
    );

-- Get all tracks where the Album is Fireball.
SELECT * FROM track
	WHERE albumid
    IN (
      SELECT albumid FROM album WHERE title = 'Fireball'
    );

-- Get all tracks for the artist Queen ( 2 nested subqueries ).
SELECT * FROM track
	WHERE albumid
    IN (
      SELECT albumid FROM album 
      WHERE artistid
      IN (
        SELECT artistid FROM artist WHERE name = 'Queen'
      )
    );

= = = = = = = = = = = = = UPDATING ROWS = = = = = = = = = = = = = 

-- Find all customers with fax numbers and set those numbers to null.
UPDATE customer
	SET fax = null
    WHERE fax IS NOT NULL;

-- Find all customers with no company (null) and set their company to "Self".
UPDATE customer SET company = "Self" WHERE company IS NULL;

-- Find the customer Julia Barnett and change her last name to Thompson.
UPDATE customer SET lastname = "Thompson" 
	WHERE firstname = "Julia"
    AND lastname = "Barnett";

-- Find the customer with this email luisrojas@yahoo.cl and change 
-- his support rep to 4.
UPDATE customer SET supportrepid = 4 WHERE email = 'luisrojas@yahoo.cl';

-- Find all tracks that are the genre Metal and have no composer. 
-- Set the composer to "The darkness around us".
UPDATE track SET composer = 'The darkness around us'
	WHERE genreid = (SELECT genreid FROM genre WHERE name = 'Metal')
    AND composer IS null;


= = = = = = = = = = = = = GROUP BY = = = = = = = = = = = = = 

-- Find a count of how many tracks there are per genre. Display the genre name with the count.
SELECT COUNT(*), genre.name FROM track
	JOIN genre ON track.genreid = genre.genreid
	GROUP BY track.genreid;

-- Find a count of how many tracks are the "Pop" genre and how many
-- tracks are the "Rock" genre.
SELECT COUNT(*) FROM track
	JOIN genre ON genre.genreid = track.genreid
    WHERE genre.name = "Pop"
    OR genre.name = "Rock"
    GROUP BY track.genreid;
    
SELECT COUNT(*) FROM track
	WHERE genreid
    IN ( SELECT genreid FROM genre
        WHERE name = "Pop"
        OR name = "Rock"
    )
    GROUP BY genreid;

-- Find a list of all artists and how many albums they have.
SELECT ar.name, COUNT(al.albumid)
	FROM artist ar
    JOIN album al ON al.artistid = ar.artistid
    GROUP BY al.artistid;


= = = = = = = = = = = = = DISTINCT = = = = = = = = = = = = = 

-- From the Track table find a unique list of all Composers.
SELECT DISTINCT composer FROM track;

-- From the Invoice table find a unique list of all BillingPostalCodes.
SELECT DISTINCT billingpostalcode FROM invoice;

-- From the Customer table find a unique list of all Companys.
SELECT DISTINCT company FROM customer;


= = = = = = = = = = = = = DELETE ROWS = = = = = = = = = = = = = 

-- Delete all "bronze" entries from the table.
DELETE FROM practice_delete WHERE type = "bronze";

-- Delete all "silver" entries from the table.
DELETE FROM practice_delete WHERE type = "silver";

-- Delete all entries whose value is equal to 150.
DELETE FROM practice_delete WHERE value = 150;


= = = = = = = = = = = = = ECOMMERCE DB = = = = = = = = = = = = = 
CREATE TABLE users (
  id INTEGER AUTO INCREMENT PRIMARY KEY ,
  name VARCHAR(200),
  email VARCHAR(200)
);

CREATE TABLE products (
	id INTEGER AUTO INCREMENT PRIMARY KEY,
    name VARCHAR(200),
    price FLOAT
);

CREATE TABLE orders (
  id INTEGER AUTO INCREMENT PRIMARY KEY,
  prod_id INTEGER REFERENCES products(id)
);
  
INSERT INTO users (id, name, email) VALUES (3, 'Jill', 'jill@msn.com');

INSERT INTO products (id, name, price) 
	VALUES (3, 'orange', 0.45);

INSERT INTO orders (id, prod_id) 
	VALUES (3, 1);

-- Get all products for the first order.
SELECT p.name 
	FROM products p
    JOIN orders o ON p.id = o.prod_id
    WHERE o.id = 1;

-- Get all orders.
SELECT * FROM orders;

-- Get the total cost of an order ( sum the price of all products 
-- on an order ).
SELECT SUM(p.price) 
	FROM products p
	JOIN orders o ON o.prod_id = p.id
    WHERE o.id = 3;

-- Add a foreign key reference from Orders to Users.
ALTER TABLE orders ADD COLUMN user_id REFERENCES users(id);

-- Update the Orders table to link a user to each order.
UPDATE orders SET user_id = 2 WHERE id = 1;
UPDATE orders SET user_id = 3 WHERE id = 3;
UPDATE orders SET user_id = 1 WHERE id = 2;

-- Run queries against your data.
-- Get all orders for a user.
-- Get how many orders each user has.
SELECT * FROM orders WHERE user_id = 3;
SELECT COUNT(*) FROM orders WHERE user_id = 1;
SELECT COUNT(*) FROM orders WHERE user_id = 2;
SELECT COUNT(*) FROM orders WHERE user_id = 3;





